/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.github.hboy.base.thrift.protocol;

import java.nio.ByteBuffer;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;


public class TestObject implements org.apache.thrift.TBase<TestObject, TestObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestObject");

  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField T_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("tShort", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField TINT_FIELD_DESC = new org.apache.thrift.protocol.TField("tint", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TLONG_FIELD_DESC = new org.apache.thrift.protocol.TField("tlong", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TBYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("tbyte", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField TDOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tdouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TBINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("tbinary", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("tstring", org.apache.thrift.protocol.TType.STRING, (short)8);

  public boolean tbl;
  public short tShort;
  public int tint;
  public long tlong;
  public byte tbyte;
  public double tdouble;
  public ByteBuffer tbinary;
  public String tstring;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TBL((short)1, "tbl"),
    T_SHORT((short)2, "tShort"),
    TINT((short)3, "tint"),
    TLONG((short)4, "tlong"),
    TBYTE((short)5, "tbyte"),
    TDOUBLE((short)6, "tdouble"),
    TBINARY((short)7, "tbinary"),
    TSTRING((short)8, "tstring");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TBL
          return TBL;
        case 2: // T_SHORT
          return T_SHORT;
        case 3: // TINT
          return TINT;
        case 4: // TLONG
          return TLONG;
        case 5: // TBYTE
          return TBYTE;
        case 6: // TDOUBLE
          return TDOUBLE;
        case 7: // TBINARY
          return TBINARY;
        case 8: // TSTRING
          return TSTRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TBL_ISSET_ID = 0;
  private static final int __TSHORT_ISSET_ID = 1;
  private static final int __TINT_ISSET_ID = 2;
  private static final int __TLONG_ISSET_ID = 3;
  private static final int __TBYTE_ISSET_ID = 4;
  private static final int __TDOUBLE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.T_SHORT, new org.apache.thrift.meta_data.FieldMetaData("tShort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TINT, new org.apache.thrift.meta_data.FieldMetaData("tint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TLONG, new org.apache.thrift.meta_data.FieldMetaData("tlong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TBYTE, new org.apache.thrift.meta_data.FieldMetaData("tbyte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TDOUBLE, new org.apache.thrift.meta_data.FieldMetaData("tdouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TBINARY, new org.apache.thrift.meta_data.FieldMetaData("tbinary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TSTRING, new org.apache.thrift.meta_data.FieldMetaData("tstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestObject.class, metaDataMap);
  }

  public TestObject() {
  }

  public TestObject(
    boolean tbl,
    short tShort,
    int tint,
    long tlong,
    byte tbyte,
    double tdouble,
    ByteBuffer tbinary,
    String tstring)
  {
    this();
    this.tbl = tbl;
    setTblIsSet(true);
    this.tShort = tShort;
    setTShortIsSet(true);
    this.tint = tint;
    setTintIsSet(true);
    this.tlong = tlong;
    setTlongIsSet(true);
    this.tbyte = tbyte;
    setTbyteIsSet(true);
    this.tdouble = tdouble;
    setTdoubleIsSet(true);
    this.tbinary = tbinary;
    this.tstring = tstring;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestObject(TestObject other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.tbl = other.tbl;
    this.tShort = other.tShort;
    this.tint = other.tint;
    this.tlong = other.tlong;
    this.tbyte = other.tbyte;
    this.tdouble = other.tdouble;
    if (other.isSetTbinary()) {
      this.tbinary = org.apache.thrift.TBaseHelper.copyBinary(other.tbinary);
;
    }
    if (other.isSetTstring()) {
      this.tstring = other.tstring;
    }
  }

  public TestObject deepCopy() {
    return new TestObject(this);
  }

  @Override
  public void clear() {
    setTblIsSet(false);
    this.tbl = false;
    setTShortIsSet(false);
    this.tShort = 0;
    setTintIsSet(false);
    this.tint = 0;
    setTlongIsSet(false);
    this.tlong = 0;
    setTbyteIsSet(false);
    this.tbyte = 0;
    setTdoubleIsSet(false);
    this.tdouble = 0.0;
    this.tbinary = null;
    this.tstring = null;
  }

  public boolean isTbl() {
    return this.tbl;
  }

  public TestObject setTbl(boolean tbl) {
    this.tbl = tbl;
    setTblIsSet(true);
    return this;
  }

  public void unsetTbl() {
    __isset_bit_vector.clear(__TBL_ISSET_ID);
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return __isset_bit_vector.get(__TBL_ISSET_ID);
  }

  public void setTblIsSet(boolean value) {
    __isset_bit_vector.set(__TBL_ISSET_ID, value);
  }

  public short getTShort() {
    return this.tShort;
  }

  public TestObject setTShort(short tShort) {
    this.tShort = tShort;
    setTShortIsSet(true);
    return this;
  }

  public void unsetTShort() {
    __isset_bit_vector.clear(__TSHORT_ISSET_ID);
  }

  /** Returns true if field tShort is set (has been assigned a value) and false otherwise */
  public boolean isSetTShort() {
    return __isset_bit_vector.get(__TSHORT_ISSET_ID);
  }

  public void setTShortIsSet(boolean value) {
    __isset_bit_vector.set(__TSHORT_ISSET_ID, value);
  }

  public int getTint() {
    return this.tint;
  }

  public TestObject setTint(int tint) {
    this.tint = tint;
    setTintIsSet(true);
    return this;
  }

  public void unsetTint() {
    __isset_bit_vector.clear(__TINT_ISSET_ID);
  }

  /** Returns true if field tint is set (has been assigned a value) and false otherwise */
  public boolean isSetTint() {
    return __isset_bit_vector.get(__TINT_ISSET_ID);
  }

  public void setTintIsSet(boolean value) {
    __isset_bit_vector.set(__TINT_ISSET_ID, value);
  }

  public long getTlong() {
    return this.tlong;
  }

  public TestObject setTlong(long tlong) {
    this.tlong = tlong;
    setTlongIsSet(true);
    return this;
  }

  public void unsetTlong() {
    __isset_bit_vector.clear(__TLONG_ISSET_ID);
  }

  /** Returns true if field tlong is set (has been assigned a value) and false otherwise */
  public boolean isSetTlong() {
    return __isset_bit_vector.get(__TLONG_ISSET_ID);
  }

  public void setTlongIsSet(boolean value) {
    __isset_bit_vector.set(__TLONG_ISSET_ID, value);
  }

  public byte getTbyte() {
    return this.tbyte;
  }

  public TestObject setTbyte(byte tbyte) {
    this.tbyte = tbyte;
    setTbyteIsSet(true);
    return this;
  }

  public void unsetTbyte() {
    __isset_bit_vector.clear(__TBYTE_ISSET_ID);
  }

  /** Returns true if field tbyte is set (has been assigned a value) and false otherwise */
  public boolean isSetTbyte() {
    return __isset_bit_vector.get(__TBYTE_ISSET_ID);
  }

  public void setTbyteIsSet(boolean value) {
    __isset_bit_vector.set(__TBYTE_ISSET_ID, value);
  }

  public double getTdouble() {
    return this.tdouble;
  }

  public TestObject setTdouble(double tdouble) {
    this.tdouble = tdouble;
    setTdoubleIsSet(true);
    return this;
  }

  public void unsetTdouble() {
    __isset_bit_vector.clear(__TDOUBLE_ISSET_ID);
  }

  /** Returns true if field tdouble is set (has been assigned a value) and false otherwise */
  public boolean isSetTdouble() {
    return __isset_bit_vector.get(__TDOUBLE_ISSET_ID);
  }

  public void setTdoubleIsSet(boolean value) {
    __isset_bit_vector.set(__TDOUBLE_ISSET_ID, value);
  }

  public byte[] getTbinary() {
    setTbinary(org.apache.thrift.TBaseHelper.rightSize(tbinary));
    return tbinary == null ? null : tbinary.array();
  }

  public ByteBuffer bufferForTbinary() {
    return tbinary;
  }

  public TestObject setTbinary(byte[] tbinary) {
    setTbinary(tbinary == null ? (ByteBuffer)null : ByteBuffer.wrap(tbinary));
    return this;
  }

  public TestObject setTbinary(ByteBuffer tbinary) {
    this.tbinary = tbinary;
    return this;
  }

  public void unsetTbinary() {
    this.tbinary = null;
  }

  /** Returns true if field tbinary is set (has been assigned a value) and false otherwise */
  public boolean isSetTbinary() {
    return this.tbinary != null;
  }

  public void setTbinaryIsSet(boolean value) {
    if (!value) {
      this.tbinary = null;
    }
  }

  public String getTstring() {
    return this.tstring;
  }

  public TestObject setTstring(String tstring) {
    this.tstring = tstring;
    return this;
  }

  public void unsetTstring() {
    this.tstring = null;
  }

  /** Returns true if field tstring is set (has been assigned a value) and false otherwise */
  public boolean isSetTstring() {
    return this.tstring != null;
  }

  public void setTstringIsSet(boolean value) {
    if (!value) {
      this.tstring = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((Boolean)value);
      }
      break;

    case T_SHORT:
      if (value == null) {
        unsetTShort();
      } else {
        setTShort((Short)value);
      }
      break;

    case TINT:
      if (value == null) {
        unsetTint();
      } else {
        setTint((Integer)value);
      }
      break;

    case TLONG:
      if (value == null) {
        unsetTlong();
      } else {
        setTlong((Long)value);
      }
      break;

    case TBYTE:
      if (value == null) {
        unsetTbyte();
      } else {
        setTbyte((Byte)value);
      }
      break;

    case TDOUBLE:
      if (value == null) {
        unsetTdouble();
      } else {
        setTdouble((Double)value);
      }
      break;

    case TBINARY:
      if (value == null) {
        unsetTbinary();
      } else {
        setTbinary((ByteBuffer)value);
      }
      break;

    case TSTRING:
      if (value == null) {
        unsetTstring();
      } else {
        setTstring((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TBL:
      return new Boolean(isTbl());

    case T_SHORT:
      return new Short(getTShort());

    case TINT:
      return new Integer(getTint());

    case TLONG:
      return new Long(getTlong());

    case TBYTE:
      return new Byte(getTbyte());

    case TDOUBLE:
      return new Double(getTdouble());

    case TBINARY:
      return getTbinary();

    case TSTRING:
      return getTstring();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TBL:
      return isSetTbl();
    case T_SHORT:
      return isSetTShort();
    case TINT:
      return isSetTint();
    case TLONG:
      return isSetTlong();
    case TBYTE:
      return isSetTbyte();
    case TDOUBLE:
      return isSetTdouble();
    case TBINARY:
      return isSetTbinary();
    case TSTRING:
      return isSetTstring();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestObject)
      return this.equals((TestObject)that);
    return false;
  }

  public boolean equals(TestObject that) {
    if (that == null)
      return false;

    boolean this_present_tbl = true;
    boolean that_present_tbl = true;
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (this.tbl != that.tbl)
        return false;
    }

    boolean this_present_tShort = true;
    boolean that_present_tShort = true;
    if (this_present_tShort || that_present_tShort) {
      if (!(this_present_tShort && that_present_tShort))
        return false;
      if (this.tShort != that.tShort)
        return false;
    }

    boolean this_present_tint = true;
    boolean that_present_tint = true;
    if (this_present_tint || that_present_tint) {
      if (!(this_present_tint && that_present_tint))
        return false;
      if (this.tint != that.tint)
        return false;
    }

    boolean this_present_tlong = true;
    boolean that_present_tlong = true;
    if (this_present_tlong || that_present_tlong) {
      if (!(this_present_tlong && that_present_tlong))
        return false;
      if (this.tlong != that.tlong)
        return false;
    }

    boolean this_present_tbyte = true;
    boolean that_present_tbyte = true;
    if (this_present_tbyte || that_present_tbyte) {
      if (!(this_present_tbyte && that_present_tbyte))
        return false;
      if (this.tbyte != that.tbyte)
        return false;
    }

    boolean this_present_tdouble = true;
    boolean that_present_tdouble = true;
    if (this_present_tdouble || that_present_tdouble) {
      if (!(this_present_tdouble && that_present_tdouble))
        return false;
      if (this.tdouble != that.tdouble)
        return false;
    }

    boolean this_present_tbinary = true && this.isSetTbinary();
    boolean that_present_tbinary = true && that.isSetTbinary();
    if (this_present_tbinary || that_present_tbinary) {
      if (!(this_present_tbinary && that_present_tbinary))
        return false;
      if (!this.tbinary.equals(that.tbinary))
        return false;
    }

    boolean this_present_tstring = true && this.isSetTstring();
    boolean that_present_tstring = true && that.isSetTstring();
    if (this_present_tstring || that_present_tstring) {
      if (!(this_present_tstring && that_present_tstring))
        return false;
      if (!this.tstring.equals(that.tstring))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestObject typedOther = (TestObject)other;

    lastComparison = Boolean.valueOf(isSetTbl()).compareTo(typedOther.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, typedOther.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTShort()).compareTo(typedOther.isSetTShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tShort, typedOther.tShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTint()).compareTo(typedOther.isSetTint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tint, typedOther.tint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTlong()).compareTo(typedOther.isSetTlong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTlong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tlong, typedOther.tlong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTbyte()).compareTo(typedOther.isSetTbyte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbyte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbyte, typedOther.tbyte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdouble()).compareTo(typedOther.isSetTdouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdouble, typedOther.tdouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTbinary()).compareTo(typedOther.isSetTbinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbinary, typedOther.tbinary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTstring()).compareTo(typedOther.isSetTstring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTstring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tstring, typedOther.tstring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TBL
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.tbl = iprot.readBool();
            setTblIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // T_SHORT
          if (field.type == org.apache.thrift.protocol.TType.I16) {
            this.tShort = iprot.readI16();
            setTShortIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TINT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.tint = iprot.readI32();
            setTintIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TLONG
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.tlong = iprot.readI64();
            setTlongIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TBYTE
          if (field.type == org.apache.thrift.protocol.TType.BYTE) {
            this.tbyte = iprot.readByte();
            setTbyteIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TDOUBLE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.tdouble = iprot.readDouble();
            setTdoubleIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TBINARY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tbinary = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TSTRING
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.tstring = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TBL_FIELD_DESC);
    oprot.writeBool(this.tbl);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(T_SHORT_FIELD_DESC);
    oprot.writeI16(this.tShort);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TINT_FIELD_DESC);
    oprot.writeI32(this.tint);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TLONG_FIELD_DESC);
    oprot.writeI64(this.tlong);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TBYTE_FIELD_DESC);
    oprot.writeByte(this.tbyte);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TDOUBLE_FIELD_DESC);
    oprot.writeDouble(this.tdouble);
    oprot.writeFieldEnd();
    if (this.tbinary != null) {
      oprot.writeFieldBegin(TBINARY_FIELD_DESC);
      oprot.writeBinary(this.tbinary);
      oprot.writeFieldEnd();
    }
    if (this.tstring != null) {
      oprot.writeFieldBegin(TSTRING_FIELD_DESC);
      oprot.writeString(this.tstring);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestObject(");
    boolean first = true;

    sb.append("tbl:");
    sb.append(this.tbl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tShort:");
    sb.append(this.tShort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tint:");
    sb.append(this.tint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tlong:");
    sb.append(this.tlong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbyte:");
    sb.append(this.tbyte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tdouble:");
    sb.append(this.tdouble);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbinary:");
    if (this.tbinary == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.tbinary, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tstring:");
    if (this.tstring == null) {
      sb.append("null");
    } else {
      sb.append(this.tstring);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

